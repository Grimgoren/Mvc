{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<h1>Report</h1>
    <h2 id="kmom01">Kmom01</h2>
    <h2>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h2>
    <p>I stort sätt inga förkunskaper (gått men ännu inte färdig med objektorienterad python)</p>

    <h2>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå 
    för att kunna komma igång och skapa sina första klasser?</h2>
    <p>Ett objekt ärver av en klass, när man skapar ett objekt. 
    En klass i PHP är som en blueprint för att skapa objekt. Den definierar variabler
     och funktioner som objekten skapade från klassen kommer att ha.</p>

    <p>Exempelvis om jag har en class som innehåller en fyrkant (längd & bredd) och sen skapar jag ett fyrkants objekt, då ärver det objektet från 
    klassen (längd och bredd)</p>


    <h2>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h2>
    <p>Väldigt stökig och rörig, strukturen på hela grejen är väldigt utsprid och oorganiserad enligt mitt tycke. Det tar längre tid än vad 
    det borde göra för att åstadkomma enkla saker, visst det löser sig efter att man kommit in i det men från en första blick så finns det inte 
    mycket mer att säga än att det är en enda stor röra.</p>

    <p>Något jag fick väldigt stora problem med var "övningen" och följande uppgift, övningen la all sin kod i "app" folder men 
    uppgiften och "dbwebb test kmom01" förväntade sig att alla filer låg i roten av /report och inte report/app. Tog många svordommar 
    och mycket extra tid för att flytta allt till rooten och få det att fungera igen. Min poäng är att övningen vägledde mig in på något som 
    inte fungerade i uppgiften och skapade otrolig frustration.</p>

    <h2>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? 
    Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h2>
    <p>Date and Time, "Calculating with DateTime is possible with the DateInterval class". Artikeln och just den sektionen highlightar hur ma arbetar med tid
    och hur man kan beräknar tid (exempelvis skillnad på x och y tid), vilket säkert kan komma till användning. Även kapitell 9 (templating) skrivs det om olika fördelar
    med templating och varför man använder det, vilket självklart är relevant just för detta kmom med twig. De går även in på att just PHP inte är särskilt
    utvecklat för templating och att vi därför använder twig "While PHP has evolved into a mature, object oriented language, it hasn’t improved much as a templating language."</p>

    <h2>Vilken är din TIL för detta kmom?</h2>
    <p>Mycket repition med exempelvis SASS, Twig och självklart PHP.</p>

    <h2 id="kmom02">Kmom02</h2>
    <h2>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h2>
    <p>Arv är som det låter något som en klass ärver från en annan, exempelvis ärver min 
    CardSort från CardValue för att kunna sortera på just "value" eller vad korten är värda (Ess>Kung>Dam osv).</p>
    <p>En komposition är när en klass kan använda en annan klass variabler i sin egna kod. Samma gäller för interface, 
    interface låter olika komponenter från klasser att interagera med varandra. Traits är något som låter dig återanvända saker från 
    en klass i en annan klass (återanvänd kod).</p>

    <h2>Berätta om din implementation från uppgiften. 
    Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h2>
    <p>Det tog extremt lång tid att få färdigt denna uppgiften och nej jag är nog inte helt nöjd med allt 
    (framförallt utseendet). Jag hade kunnat dela upp exempelvis DeckOfCards i fler små klasser, även om jag gjorde det till 
    viss del med exempelvis Draw och CardValue samt CardSort.</p>

    <h2>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h2>
    <p>Jag tycker själva interfacet är ovänligt i många fall, det är många gånger som det inte är helt uppenbart varför 
    något inte fungerar och man kan spendera mycket tid på något som senare visar sig faktiskt ha fungerat men symfony förväntat 
    sig på ett annat sätt, lite svårt att ge konkret exempel men det är hur jag upplever det just nu i alla fall.</p>

    <h2>Vilken är din TIL för detta kmom?</h2>
    <p>mycket php och klasser, repition om hur man hanterar klasser och arv.</p>


    <h2 id="kmom03">Kmom03</h2>
    <h2>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. 
    Var det något som du tror stödjer dig i din problemlösning och tankearbete för att 
    strukturera koden kring en applikation?</h2>
    <p>Jag tyckte det hjälpte rätt så mycket eftersom man redan innan påbörjandet av kodandet såg vilka problem man 
    hade kommit att fastna i för att man inte "tänkt så långt" vilket ledde till att jag undvek dem problemen när jag skrev 
    själva koden. Exempelvis hur det hela skulle fungera när man valde att dra fler kort och titta upp om korte översteg 21 eller inte
     och vad man då skulle göra.</p>

    <h2>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, 
    vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</h2>
    <p>Självklart så är det inte "snyggt" det är alltid något som kan förbättras (utseendemässigt) men hur det funkar är 
    jag rätt nöjd med. Hela saken funkar nästintill exakt som mitt flödeschema är uppställd innan jag började skriva koden.
    Dealern får två kort vilken en av dem är gömt för spelaren, spelaren får två kort och sen får spelaren välja vad den vill göra.
    Stanna eller dra mer kort. Dealern drar alltid kort till minst 17 poäng är nådda efter att spelaren valt att stanna och sen 
    summeras spelet och ett resultat visas.</p>

    <h2>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</h2>
    <p>I början tyckte jag det var otroligt rörigt men nu börjar det "falla på plats" lite mera och jag har börjat 
    tycka exemeplvis twig osv är rätt smidigt för att göra olika saker på samma sida beroende på x och y.</p>

    <h2>Vilken är din TIL för detta kmom?</h2>
    <p>Mycket php och twig.</p>

    <h2 id="kmom04">Kmom04</h2>
    <h2>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</h2>
    <p>Det var lite svårt att komma igång med till och blörja med, men efter en stund så förstod man hur det skulle ställas upp så att säga.
    Då blev det ganska "straight forward" i slutändan att lägga in små test för att testa x och y i visa delar av min kod.</p>

    <h2>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</h2>
    <p>Om nu allt stämmer så fick jag 100% på samtliga test, visst det kan ju vara att jag lurat mig själv men det ser bra ut 
    i alla fall.</p>

    <h2>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller 
    mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</h2>
    <p>Jag skulle ändå påstå att min kod är relativt testbar, 
    koden har inga superkomplicerade functioner eller klasser, det finns inga stora enskilda funktioner, allt är 
    uppdelat i små egna delar.</p>

    <h2>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, 
    om så berätta lite hur du tänkte.</h2>
    <p>Nej jag vale att inte skriva om koden då det inte fanns något uppenbart behov av det. 
    Detta eftersom allt jag ville testa gick att genomföra utan några större ändringar.
     Mycket av mina klasser var bra uppdelade till att börja med i små egna delar,
     så som CardHand och getHandValue som skickar tillbaka vad din hand är värd i relation till spelet 21 så 
     behövdes inga större ändringar och funktionen som blandar korten shuffleDeck från DeckOfCards, där räcker det att göra två kortlekar och sortera dem båda och 
    sen säkerställa att dem inte är exakt samma i en assert. 
    </p>

    <h2>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</h2>
    <p>Jag skulle anta att "sygg kod" och testbar kod har samma kvalite, om koden är stor och avancerad så är den nog 
    förmodligen mycket svårare att testa i sin helhet. Medans "snygg kod" förmodligen är mycket enklare att rent allmänt "läsa" 
    och därmed också testa.</p>

    <h2>Vilken är din TIL för detta kmom?</h2>
    <p>Skriva tester, phpdoc m.m.</p>

    <h2 id="kmom05">Kmom05</h2>
        <h2>
            Gick det bra att jobba igenom övningen med Symfony och Doctrine. 
            Något särskilt du tänkte/reagerade på under övningen?
        </2>
            <p>
                Övningen var bra uppbyggd och gick att applicera nästan direkt på uppgiften (något som inte är sant 
                för många utav tidigare övnnigar enligt hur jag upplevt det) vilket var väldigt positivt. Det ledde 
                till mindre slösad tid med stopp där man funderar över varför något inte funkar.
            </p>
        <h2>
            Berätta om din applikation och hur du tänkte när du byggde upp den. 
            Tänkte du något speciellt på användargränssnittet?
        </h2>
            <p>
                Jag började med göra någon typ av sökfunktion för att uppfylla krav 4, visst det visade sig senare 
                att det går att hoppa över detta och göra så att man kommer till detaljer om en bok när man trycker på den 
                i den routen som visar alla böcker. Oavsett så kan det fortfarande vara bra att ha en sådan sökfunktion 
                om biblioteket växer. Själva gränssnittet är simpelt, jag ville ha det så basic som möjligt, en knapp för att 
                göra något och en annan knapp för att gå tillbaka, något som är implementerat på de flesta sidorna i 
                biblioteket.
            </p>
        <h2>
            Gick det bra att jobba med ORM i CRUD eller vad anser du om det, 
            jämför gärna med andra sätt att jobba med databaser?
        </h2>
            <p>
                Eftersom övningen var så bra uppbyggd så gick det väldigt smidigt att komma igång med databasen, jag har självklart 
                några problem som jag inte löst, exempelvis att böckerna id inte gör något reset om man exempelvis tar bort en bok. 
                Vilket innebär att en bok som är gammal kan ha id 2 medans en ny bok kan ha id 18. Jag tyckte ändå att det var 
                väldigt skönt att arbeta med denna databas om jag jämför med SQL.
            </p>
        <h2>
            Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med 
            applikationskod mot databaser?
        </h2>
            <p>
                Denna fråga är delvis besvarad i tidigare frågeställningar, jag tyckte att denna databas var mycket mer enkel att 
                komma igång md och komma frammåt med än om man jämför med SQL. Twig gör det också väldigt skönt att "göra" saker 
                med databasen, vill jag göra något så skriver jag bara en route och andänder twig för att lösa det, mycket 
                användarvänligt i min mening.
            </p>
        <h2>
            Vilken är din TIL för detta kmom?
        </h2>
            <p>
                CRUD och uppdatera minnet om twig.
            </p>

    <h2 id="kmom06">Kmom06</h2>
        <h2>Hur uppfattade du verktyget phpmetrics och fann du några särskilda bitar mer värdefulla än andra? 
        Var det några särskilda metrics eller bilder du uppskattade?</h2>
            <p>
                "Maintainability / complexity" bilden på förstasida som visualiserar hur stor/liten en klass är tyckte 
                jag var ett schysst verktyg för att snabbt sätta sig in i vad som kanske är ett problem. Även LLOC och Volyme 
                är bra då det direkt ger någonting att arbeta mot för att sänka värdena. Dock så tycker jag att scrutinizer är 
                mycket mer övergripligt och det fick mig att använda det verktyget i första hand.
            </p>
        <h2>Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? 
        Vilken kodtäckning och kodkvalitet fick du efter första bygget?</h2>
            <p>
                Som jag nämnde föredrog jag scrutinizer och jag använde badges (framförallt coverage) nästan som en typ av "mini-
                spel, man ville öka sin score och varje gång man pushade en ny update så var det roligt att se ens score öka. I 
                början hade jag 11% coverage och efter ändringar har jag 26%, scrutinizer badgen började 9.96 och slutade på 9.97 
                (antar att detta är någon typ av bedömning på kvaliten av koden?). Build hade jag 'passed' på redan från start.
            </p>
        <h2>Hur är din egen syn på kodkvalitet, berätta lite om den? 
        Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du?</h2>
            <p>
                Att skriva tester till det mesta är rätt viktigt så man kan säkerställa att sakerna fungerar, annars 
                behöver man manuellt gå in och testa allt som har med någonting att göra vid eventuella ändringar. Med det sagt 
                så relaterar jag självklart till scrutinizers badge om coverage. Jag skulle tro att ett projekt med väldigt hög 
                coverage förmodligen är väldigt välskriven eftersom du vid det stadiet både har skapat något och tagit dig tiden 
                att skriva tester till nästintill allting som kan ske i koden.
            </p>
        <h2>Vilken är din TIL för detta kmom?</h2>
            <p>
                Scrutinizer & phpmetrics samt kodkvalite överlag.
            </p>
    <h2 id="kmom07">Kmom07</h2>
    <p></p>
    <h2 id="kmom08">Kmom08</h2>
    <p></p>
{% endblock %}
